#lang racket/base
; Signature: append(l1, l2)
; Type: [(list<T>)*(list<T>)] -> list<T>
; Purpose: connects between two lists
; Pre-conditions: none
; Tests: (append (1,2)(3,4))==>(1,2,3,4)

(define append
    (lambda (l1 l2)
        (if (eq? l1 '()) l2
            (if (eq? (cdr l1) '())
                (cons (car l1) l2)
                (cons (car l1) (append (cdr l1) l2))))        
))

; Signature: reverse(l)
; Type: list<T> -> list<T>
; Purpose: reverses the list
; Pre-conditions: none
; Tests: (reverse (1,2,3))==>(3,2,1)

(define reverse
    (lambda (l)
      (if (eq? l '()) '()
        (if (eq? (cdr l) '())
            l 
            (append (reverse (cdr l)) (cons (car l) '()))))
))

; Signature: numToList(num amount)
; Type: [number*number] -> list<number>
; Purpose: duplicate 'num', 'amount' times
; Pre-conditions: amount >= 0
; Tests: (numToList (1,2))==>(1,1)

(define numToList
    (lambda (num amount)
    (if (<= amount 0) '()
        (cons num (numToList num (+ amount -1))))
))

; Signature:duplicate-items(lst dup-count)
; Type: [list<number>*list<number>] -> list<number>
; Purpose: duplicates each item of lst according to the number defined in the same position in dup-count.
; Pre-conditions: dup-count contains numbers and is not empty
; Tests: duplicate-items((1,2,3) (1,0,2))==>(1,3,3)

(define duplicate-items
    (lambda (lst dup-count)
        (if (eq? lst '()) 
            '()
            (append (numToList (car lst) (car dup-count)) (duplicate-items (cdr lst) 
                                                          (append (cdr dup-count) 
                                                          (cons (car dup-count) '())))))
))
